openapi: 3.0.0
info:
    title: ArticlesAPI
    version: "1"

servers:
    - url: http://localhost:{port}/api/oak-test/{version}
      variables:
          version:
              default: 'v1'
          port:
              default: '8080'

paths:
  /articles:
    get:
      description: "Return all articles "
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ArticlesGetAll'

  /articles/{id}:
    get:
      description: "Find article by ID"
      operationId: "getArticleById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of article to return"
        required: true
        schema:
          type: "integer"
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ArticlesGetOne'
        '404':
          description: "Article not found"
          content:
            application/vnd.api+json:
              schema:
                $ref: '../common/errors.yaml#/components/schemas/Error'
        '400':
          description: "Invalid ID"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'





components:
    schemas:

        ArticlesGetAll:
            description: articles list structure
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/ArticleDto'

        ArticlesGetOne:
            description: article
            type: object
            properties:
                data:
                    $ref: '#/components/schemas/ArticleDto'

        ArticleDto:
          type: object
          properties:
            type:
              type: string
            id:
              type: integer
            attributes:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
              required:
                - title
                - body
            relationship:
              $ref: '#/components/schemas/Relationship'
          required:
            - type
            - id

        Relationship:
          type: object
          properties:
            comments:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/RelationshipComments'

        RelationshipComments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'

        CommentDto:
          type: object
          properties:
            type:
              type: string
            id:
              type: integer
          required:
          - type
          - id

        Error:
          description: errors list
          type: object
          properties:
              errors:
                  type: array
                  items:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      code:
                        type: string
                    required:
                    - status
                    - message
                    - code

